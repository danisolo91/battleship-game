{"version":3,"sources":["contexts/GameContext.js","factories/GameBoard.js","components/ComputerBoard.js","components/PlayerBoard.js","factories/Ship.js","factories/Player.js","components/ShipsBoard.js","components/GameBoards.js","components/Nickname.js","App.js","index.js"],"names":["GameContext","createContext","GameProvider","props","useState","gameOver","turn","players","boards","game","setGame","Provider","value","children","GameBoard","board","ships","addShip","place","ship","forEach","cell","addPosition","push","getPlace","axis","getHorizontalCells","getVerticalCells","length","placeIsOccuped","selectedRow","Math","floor","cells","i","placeColumn","result","some","s","hasPosition","init","getBoard","getShips","placeShipsRandomly","shipsArr","random","receiveAttack","find","hit","hasLost","filter","isSunk","ComputerBoard","useContext","shoot","player","c","computerBoard","prevState","nickname","className","map","print","onClick","PlayerBoard","Ship","name","positions","getPositions","isHit","p","Player","shotsHistory","randomShot","isValidShot","includes","clearShotsHistory","ShipsBoard","computerPlayer","GameBoards","useEffect","computer","playerBoard","setTimeout","Nickname","setPlayer","onSubmit","e","preventDefault","type","placeholder","maxLength","minLength","required","onChange","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa620944.chunk.js","sourcesContent":["import { createContext, useState } from \"react\";\n\nexport const GameContext = createContext();\n\nexport const GameProvider = (props) => {\n\n    const [game, setGame] = useState({\n        gameOver: false,\n        turn: 0, // position in players array (0: human, 1: computer)\n        players : [],\n        boards: [],\n    });\n\n    return (\n        <GameContext.Provider value={[game, setGame]}>\n            {props.children}\n        </GameContext.Provider>\n    );\n};","const GameBoard = () => {\n    let board = [];\n    let ships = [];\n\n    /**\n     * Populate board[] with 100 false elements.\n     * A true element means it has been shooted by the enemy.\n     */\n    const init = () => {\n        for (let i = 0; i < 100; i++) {\n            board.push(false);\n        }\n    }\n\n    const getBoard = () => {\n        return board;\n    };\n\n    const getShips = () => {\n        return ships;\n    };\n\n    const addShip = (place, ship) => {\n        place.forEach(cell => {\n            ship.addPosition(cell);\n            board[cell] = 's';\n        });\n        ships.push(ship);\n    };\n\n    /** \n     * Place is an array containing the cells occuped\n     * by the ship. If the ship does not fit on that\n     * cells, it returns an empty array\n     */\n    const getPlace = (cell, axis, ship) => {\n        let place = [];\n\n        if (axis === 'X') {\n            place = getHorizontalCells(cell, ship);\n        } else if (axis === 'Y') {\n            place = getVerticalCells(cell, ship);\n        }\n\n        /** \n         * Check if there is a ship already occuping\n         * any cell from place array\n         */\n        if (place.length > 0 && placeIsOccuped(place)) {\n            place = [];\n        }\n\n        return place;\n    };\n\n    const getHorizontalCells = (cell, ship) => {\n        let selectedRow = Math.floor(cell / 10);\n        let placeRow = Math.floor((cell + ship.length - 1) / 10);\n        let cells = [];\n\n        /** \n         * If the ship fits in the selected row, populate\n         * cells with the corresponding positions\n         */\n        if (placeRow === selectedRow) {\n            for (let i = cell; i <= cell + ship.length - 1; i++) {\n                cells.push(i);\n            }\n        }\n\n        return cells;\n    };\n\n    const getVerticalCells = (cell, ship) => {\n        let placeColumn = cell + (ship.length * 10) - 10;\n        let cells = [];\n\n        /** If the ship fits in the selected column, populate\n         * cells with the corresponding positions\n         */\n        if (placeColumn < 100) {\n            for (let i = cell; i <= placeColumn; i += 10) {\n                cells.push(i);\n            }\n        }\n\n        return cells;\n    };\n\n    const placeIsOccuped = (place) => {\n        let result = false;\n\n        for (let cell of place) {\n            if (ships.some(s => s.hasPosition(cell))) {\n                result = true;\n                break;\n            }\n        };\n\n        return result;\n    };\n\n    /**\n     * Receive an array of ships, and places them\n     * on the board randomly.\n     */\n    const placeShipsRandomly = (shipsArr) => {\n        shipsArr.forEach(ship => {\n            let place = [];\n            while (place.length === 0) {\n                const axis = Math.floor(Math.random() * 2) ? 'X' : 'Y';\n                const cell = Math.floor(Math.random() * 100);\n                place = getPlace(cell, axis, ship);\n            }\n            addShip(place, ship);\n        });\n    };\n\n    const receiveAttack = (cell) => {\n        if(board[cell] === false) {\n            board[cell] = true;\n        } else if(board[cell] === 's') {\n            board[cell] = 'sh';\n        }\n\n        const ship = ships.find(ship => ship.hasPosition(cell));\n        if (ship) ship.hit(cell);\n    };\n\n    const hasLost = () => {\n        const result = ships.filter(ship => ship.isSunk());\n        return (result.length === 5);\n    };\n\n\n    return {\n        init,\n        getBoard,\n        getShips,\n        getPlace,\n        addShip,\n        placeShipsRandomly,\n        receiveAttack,\n        hasLost,\n    };\n};\n\nexport default GameBoard;","import { useContext } from \"react\";\nimport { GameContext } from \"../contexts/GameContext\";\n\nconst ComputerBoard = () => {\n\n    const [game, setGame] = useContext(GameContext);\n\n    // Player attack\n    const shoot = (cell) => {\n        const player = game.players[0];\n        const c = player.shoot(cell);\n\n        if (c != null) {\n            const computerBoard = game.boards[1];\n            computerBoard.receiveAttack(c);\n\n            let turn = 1;\n            let gameOver = false;\n\n            if (computerBoard.hasLost()) {\n                turn = 0;\n                gameOver = true;\n            }\n\n            setGame(prevState => {\n                return {\n                    ...prevState,\n                    gameOver: gameOver,\n                    turn: turn,\n                    players: [\n                        player,\n                        prevState.players[1],\n                    ],\n                    boards: [\n                        prevState.boards[0],\n                        computerBoard,\n                    ],\n                };\n            });\n        }\n    };\n\n    return (\n        <div>\n            <h2>{game.players[1].nickname}</h2>\n            {(game.turn === 0 && game.gameOver === false) ?\n                <div className=\"board has-turn active\">\n                    {game.boards[1].getBoard().map((cell, i) => {\n                        let print;\n                        if (cell === false) {\n                            print = <div key={i} onClick={() => shoot(i)} className=\"cell normal\"></div>\n                        } else if (cell === true) {\n                            print = <div key={i} className=\"cell water\"></div>\n                        } else if (cell === 's') {\n                            print = <div key={i} onClick={() => shoot(i)} className=\"cell normal\"></div>\n                        } else if (cell === 'sh') {\n                            print = <div key={i} className=\"cell hit\"></div>\n                        }\n                        return print;\n                    })}\n                </div> :\n                <div className=\"board\">\n                    {game.boards[1].getBoard().map((cell, i) => {\n                        let print;\n                        if (cell === false) {\n                            print = <div key={i} className=\"cell\"></div>\n                        } else if (cell === true) {\n                            print = <div key={i} className=\"cell water\"></div>\n                        } else if (cell === 's') {\n                            print = <div key={i} className=\"cell\"></div>\n                        } else if (cell === 'sh') {\n                            print = <div key={i} className=\"cell hit\"></div>\n                        }\n                        return print;\n                    })}\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default ComputerBoard;","import { useContext } from \"react\";\nimport { GameContext } from \"../contexts/GameContext\";\n\nconst PlayerBoard = () => {\n\n    const game = useContext(GameContext)[0];\n\n    return (\n        <div>\n            <h2>{game.players[0].nickname}</h2>\n            <div className=\"board\">\n                {game.boards[0].getBoard().map((cell, i) => {\n                    let print;\n                    if (cell === false) {\n                        print = <div key={i} className=\"cell\"></div>\n                    } else if (cell === true) {\n                        print = <div key={i} className=\"cell water\"></div>\n                    } else if (cell === 's') {\n                        print = <div key={i} className=\"cell ship\"></div>\n                    } else if (cell === 'sh') {\n                        print = <div key={i} className=\"cell hit\"></div>\n                    }\n                    return print;\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default PlayerBoard;","const Ship = (name, length) => {\n\n    /** Cells occupied by the ship on a GameBoard */\n    let positions = [];\n\n    const getPositions = () => {\n        return positions;\n    };\n\n    const addPosition = (cell) => {\n        positions.push({\n            cell: cell,\n            isHit: false,\n        });\n    };\n\n    /** Check if the ship occupies a given cell */\n    const hasPosition = (cell) => {\n        return positions.some(c => c.cell === cell);\n    }\n\n    /** \n     * Change isHit to true if the Ship receives a hit\n     * on a occupied cell\n     */\n    const hit = (cell) => {\n        positions.forEach(p => {\n            if (p.cell === cell) p.isHit = true;\n            return p\n        });\n    }\n\n    /** Check if the ship is sunk */\n    const isSunk = () => {\n        let result = true;\n        for (let p of positions) {\n            if (p.isHit === false) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    };\n\n    return {\n        name,\n        length,\n        getPositions,\n        addPosition,\n        hasPosition,\n        hit,\n        isSunk,\n    };\n};\n\nexport default Ship;","const Player = (nickname) => {\n    let shotsHistory = [];\n\n    /**\n     * Registers on shotsHistory the cell position\n     * of the enemy's board when the player shoots\n     */\n    const shoot = (cell = null) => {\n        let result = cell;\n\n        /** \n         * If the function is called without a cell position\n         * means that is Computer's turn, so run a randomShoot\n         */\n        if (result === null) result = randomShot();\n\n        if (isValidShot(result)) {\n            shotsHistory.push(result);\n        } else {\n            result = null;\n        }\n\n        return result;\n    };\n\n    // For computer player only\n    const randomShot = () => {\n        let cell = Math.floor(Math.random() * 100);\n        while (!isValidShot(cell)) cell = Math.floor(Math.random() * 100);\n        return cell;\n    };\n\n    const isValidShot = (cell) => {\n        return (!shotsHistory.includes(cell) && cell >= 0 && cell < 100);\n    };\n\n    const clearShotsHistory = () => shotsHistory = [];\n\n    return { nickname, clearShotsHistory, shoot };\n};\n\nexport default Player;","import { useContext } from \"react\";\nimport { GameContext } from \"../contexts/GameContext\";\nimport Ship from '../factories/Ship';\nimport Player from '../factories/Player';\nimport GameBoard from \"../factories/GameBoard\";\n\nconst ShipsBoard = () => {\n\n    const [game, setGame] = useContext(GameContext);\n    const board = game.boards[0];\n\n    const shipsArr = [\n        Ship('carrier', 5),\n        Ship('battleship', 4),\n        Ship('Cruiser', 3),\n        Ship('Submarine', 3),\n        Ship('Destroyer', 2),\n    ];\n\n    const placeShips = () => {\n        board.placeShipsRandomly(shipsArr);\n        setGame(prevState => {\n            return {\n                ...prevState,\n                boards: [board],\n            };\n        });\n    };\n\n    // Create COMPUTER player and its board\n    const startGame = () => {\n        const computerPlayer = Player('Enemy');\n        const computerBoard = GameBoard();\n        computerBoard.init();\n        computerBoard.placeShipsRandomly(shipsArr);\n        setGame(prevState => {\n            return {\n                ...prevState,\n                players: [prevState.players[0], computerPlayer],\n                boards: [prevState.boards[0], computerBoard],\n            };\n        });\n    };\n\n    return (\n        <div>\n            <h2>{game.players[0].nickname}</h2>\n            <div className=\"board\">\n                {game.boards[0].getBoard().map((cell, i) => {\n                    let print;\n                    if (cell === false) {\n                        print = <div key={i} className=\"cell\"></div>\n                    } else if (cell === true) {\n                        print = <div key={i} className=\"cell water\"></div>\n                    } else if (cell === 's') {\n                        print = <div key={i} className=\"cell ship\"></div>\n                    } else if (cell === 'sh') {\n                        print = <div key={i} className=\"cell hit\"></div>\n                    }\n                    return print;\n                })}\n            </div>\n            {game.boards[0].getShips().length === 0 ?\n                <button onClick={placeShips}>Place ships</button> :\n                <button onClick={startGame}>Start Game</button>\n            }\n        </div>\n    );\n};\n\nexport default ShipsBoard;","import { useContext, useEffect } from \"react\";\nimport { GameContext } from \"../contexts/GameContext\";\nimport GameBoard from '../factories/GameBoard';\nimport ComputerBoard from \"./ComputerBoard\";\nimport PlayerBoard from \"./PlayerBoard\";\nimport ShipsBoard from \"./ShipsBoard\";\n\nconst GameBoards = () => {\n\n    const [game, setGame] = useContext(GameContext);\n\n    useEffect(() => {\n        if (game.boards.length === 0) {\n            const board = GameBoard();\n            board.init();\n            setGame(prevState => {\n                return {\n                    ...prevState,\n                    boards: [board],\n                };\n            });\n        }\n\n        // Computer attack\n        if (game.turn === 1 && game.gameOver === false) {\n            const computer = game.players[1];\n            const cell = computer.shoot();\n\n            if (cell != null) {\n                const playerBoard = game.boards[0];\n                playerBoard.receiveAttack(cell);\n\n                let turn = 0;\n                let gameOver = false;\n\n                if (playerBoard.hasLost()) {\n                    turn = 1;\n                    gameOver = true;\n                }\n\n                setTimeout(() => {\n                    setGame(prevState => {\n                        return {\n                            ...prevState,\n                            gameOver: gameOver,\n                            turn: turn,\n                            players: [\n                                prevState.players[0],\n                                computer,\n                            ],\n                            boards: [\n                                playerBoard,\n                                prevState.boards[1],\n                            ]\n                        };\n                    });\n                }, 1000);\n            }\n        }\n    });\n\n    const restart = () => {\n        const player = game.players[0];\n        player.clearShotsHistory();\n        setGame({\n            gameOver: false,\n            turn: 0,\n            players: [player],\n            boards: [],\n        });\n    }\n\n    return (\n        <>\n            <div className=\"boards\">\n                {game.boards.length === 1 ?\n                    <ShipsBoard /> :\n                    game.boards.length === 2 &&\n                    <>\n                        <PlayerBoard />\n                        <ComputerBoard />\n                    </>\n                }\n            </div>\n            {game.gameOver === true && \n                <>\n                    <h3>Game Over</h3>\n                    <p>{game.turn === 0 ? 'Congratulations, You have won!' : 'Computer wins'}</p>\n                    <button onClick={restart}>Play again</button>\n                </>\n            }\n        </>\n    );\n};\n\nexport default GameBoards;","import { useContext, useState } from \"react\";\nimport { GameContext } from \"../contexts/GameContext\";\nimport Player from '../factories/Player';\n\nconst Nickname = () => {\n\n    const setGame = useContext(GameContext)[1];\n    const [player, setPlayer] = useState(Player(\"\"));\n\n    const changeNickname = (e) => {\n        setPlayer(prevState => {\n            return { ...prevState, [e.target.name]: e.target.value };\n        });\n    }\n\n    const submitPlayer = (e) => {\n        e.preventDefault();\n        setGame(prevState => {\n            return {\n                ...prevState,\n                players: [player],\n            };\n        });\n    };\n\n    return (\n        <>\n            <form onSubmit={submitPlayer}>\n                <input type=\"text\" name=\"nickname\" placeholder=\"Enter your nickname...\"\n                    value={player.nickname} maxLength=\"15\" minLength=\"2\" required\n                    onChange={changeNickname} />\n                <button type=\"submit\">Next</button>\n            </form>\n        </>\n    );\n};\n\nexport default Nickname;","import { useContext } from \"react\";\nimport GameBoards from \"./components/GameBoards\";\nimport Nickname from \"./components/Nickname\"\nimport { GameContext } from \"./contexts/GameContext\";\n\nconst App = () => {\n\n    const game = useContext(GameContext)[0];\n\n    return (\n        <>\n            <h1>Battleship</h1>\n            <div className=\"container\">\n                {game.players.length === 0 ?\n                    <Nickname /> :\n                    <GameBoards />\n                }\n            </div>\n        </>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { GameProvider } from './contexts/GameContext';\n\nReactDOM.render(\n    <React.StrictMode>\n        <GameProvider>\n            <App />\n        </GameProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}